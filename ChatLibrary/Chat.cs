// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.0

// <auto-generated>
//
// Generated from file `Chat.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>


using _System = global::System;
using _Microsoft = global::Microsoft;

namespace Chat
{
    public abstract class SESSIONCTXPROP
    {
        public const string value = "Chat_CTX_2007";
    }

    public abstract class AUTHORCTXPROP
    {
        public const string value = "Chat_Post_Author_CTX_2007";
    }

    public partial class IChatException : Ice.UserException
    {
        #region Slice data members

        public string Reason;

        #endregion

        #region Constructors

        public IChatException()
        {
        }

        public IChatException(_System.Exception ex__) : base(ex__)
        {
        }

        private void initDM__(string Reason)
        {
            this.Reason = Reason;
        }

        public IChatException(string Reason)
        {
            initDM__(Reason);
        }

        public IChatException(string Reason, _System.Exception ex__) : base(ex__)
        {
            initDM__(Reason);
        }

        #endregion

        public override string ice_name()
        {
            return "Chat::IChatException";
        }

        #region Object members

        public override int GetHashCode()
        {
            int h__ = 0;
            if(Reason != null)
            {
                h__ = 5 * h__ + Reason.GetHashCode();
            }
            return h__;
        }

        public override bool Equals(object other__)
        {
            if(other__ == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            IChatException o__ = other__ as IChatException;
            if(o__ == null)
            {
                return false;
            }
            if(Reason == null)
            {
                if(o__.Reason != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Reason.Equals(o__.Reason))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        public static bool operator==(IChatException lhs__, IChatException rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        public static bool operator!=(IChatException lhs__, IChatException rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshaling support

        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeString("::Chat::IChatException");
            os__.startWriteSlice();
            os__.writeString(Reason);
            os__.endWriteSlice();
        }

        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readString();
            }
            is__.startReadSlice();
            Reason = is__.readString();
            is__.endReadSlice();
        }

        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "exception Chat::IChatException was not generated with stream support";
            throw ex;
        }

        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "exception Chat::IChatException was not generated with stream support";
            throw ex;
        }

        #endregion
    }

    public partial class IllegalChatSessionException : Chat.IChatException
    {
        #region Slice data members

        public string SessionId;

        #endregion

        #region Constructors

        public IllegalChatSessionException()
        {
        }

        public IllegalChatSessionException(_System.Exception ex__) : base(ex__)
        {
        }

        private void initDM__(string SessionId)
        {
            this.SessionId = SessionId;
        }

        public IllegalChatSessionException(string Reason, string SessionId) : base(Reason)
        {
            initDM__(SessionId);
        }

        public IllegalChatSessionException(string Reason, string SessionId, _System.Exception ex__) : base(Reason, ex__)
        {
            initDM__(SessionId);
        }

        #endregion

        public override string ice_name()
        {
            return "Chat::IllegalChatSessionException";
        }

        #region Object members

        public override int GetHashCode()
        {
            int h__ = base.GetHashCode();
            if(SessionId != null)
            {
                h__ = 5 * h__ + SessionId.GetHashCode();
            }
            return h__;
        }

        public override bool Equals(object other__)
        {
            if(other__ == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            IllegalChatSessionException o__ = other__ as IllegalChatSessionException;
            if(o__ == null)
            {
                return false;
            }
            if(!base.Equals(other__))
            {
                return false;
            }
            if(SessionId == null)
            {
                if(o__.SessionId != null)
                {
                    return false;
                }
            }
            else
            {
                if(!SessionId.Equals(o__.SessionId))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        public static bool operator==(IllegalChatSessionException lhs__, IllegalChatSessionException rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        public static bool operator!=(IllegalChatSessionException lhs__, IllegalChatSessionException rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshaling support

        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeString("::Chat::IllegalChatSessionException");
            os__.startWriteSlice();
            os__.writeString(SessionId);
            os__.endWriteSlice();
            base.write__(os__);
        }

        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readString();
            }
            is__.startReadSlice();
            SessionId = is__.readString();
            is__.endReadSlice();
            base.read__(is__, true);
        }

        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "exception Chat::IllegalChatSessionException was not generated with stream support";
            throw ex;
        }

        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "exception Chat::IllegalChatSessionException was not generated with stream support";
            throw ex;
        }

        #endregion
    }

    public partial class Post : _System.ICloneable
    {
        #region Slice data members

        private string Author_prop;
        public virtual string Author
        {
            get
            {
                return Author_prop;
            }
            set
            {
                Author_prop = value;
            }
        }

        private string Message_prop;
        public virtual string Message
        {
            get
            {
                return Message_prop;
            }
            set
            {
                Message_prop = value;
            }
        }

        private long time_prop;
        public virtual long time
        {
            get
            {
                return time_prop;
            }
            set
            {
                time_prop = value;
            }
        }

        #endregion

        #region Constructors

        public Post()
        {
        }

        public Post(string Author, string Message, long time)
        {
            this.Author_prop = Author;
            this.Message_prop = Message;
            this.time_prop = time;
        }

        #endregion

        #region ICloneable members

        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        public override int GetHashCode()
        {
            int h__ = 0;
            if(Author != null)
            {
                h__ = 5 * h__ + Author.GetHashCode();
            }
            if(Message != null)
            {
                h__ = 5 * h__ + Message.GetHashCode();
            }
            h__ = 5 * h__ + time.GetHashCode();
            return h__;
        }

        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            Post o__ = (Post)other__;
            if(Author == null)
            {
                if(o__.Author != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Author.Equals(o__.Author))
                {
                    return false;
                }
            }
            if(Message == null)
            {
                if(o__.Message != null)
                {
                    return false;
                }
            }
            else
            {
                if(!Message.Equals(o__.Message))
                {
                    return false;
                }
            }
            if(!time.Equals(o__.time))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        public static bool operator==(Post lhs__, Post rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        public static bool operator!=(Post lhs__, Post rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeString(Author_prop);
            os__.writeString(Message_prop);
            os__.writeLong(time_prop);
        }

        public void read__(IceInternal.BasicStream is__)
        {
            Author_prop = is__.readString();
            Message_prop = is__.readString();
            time_prop = is__.readLong();
        }

        #endregion
    }

    public partial interface Listener : Ice.Object, ListenerOperations_, ListenerOperationsNC_
    {
    }

    public partial interface Room : Ice.Object, RoomOperations_, RoomOperationsNC_
    {
    }

    public partial interface RoomV2 : Ice.Object, RoomV2Operations_, RoomV2OperationsNC_
    {
    }

    public partial interface RoomAdm : Ice.Object, RoomAdmOperations_, RoomAdmOperationsNC_, Chat.Room
    {
    }

    public partial class RoomAccess : _System.ICloneable
    {
        #region Slice data members

        private Chat.RoomPrx RoomProxy_prop;
        public virtual Chat.RoomPrx RoomProxy
        {
            get
            {
                return RoomProxy_prop;
            }
            set
            {
                RoomProxy_prop = value;
            }
        }

        private string SessionId_prop;
        public virtual string SessionId
        {
            get
            {
                return SessionId_prop;
            }
            set
            {
                SessionId_prop = value;
            }
        }

        #endregion

        #region Constructors

        public RoomAccess()
        {
        }

        public RoomAccess(Chat.RoomPrx RoomProxy, string SessionId)
        {
            this.RoomProxy_prop = RoomProxy;
            this.SessionId_prop = SessionId;
        }

        #endregion

        #region ICloneable members

        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        public override int GetHashCode()
        {
            int h__ = 0;
            if(RoomProxy != null)
            {
                h__ = 5 * h__ + RoomProxy.GetHashCode();
            }
            if(SessionId != null)
            {
                h__ = 5 * h__ + SessionId.GetHashCode();
            }
            return h__;
        }

        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            RoomAccess o__ = (RoomAccess)other__;
            if(RoomProxy == null)
            {
                if(o__.RoomProxy != null)
                {
                    return false;
                }
            }
            else
            {
                if(!RoomProxy.Equals(o__.RoomProxy))
                {
                    return false;
                }
            }
            if(SessionId == null)
            {
                if(o__.SessionId != null)
                {
                    return false;
                }
            }
            else
            {
                if(!SessionId.Equals(o__.SessionId))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        public static bool operator==(RoomAccess lhs__, RoomAccess rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        public static bool operator!=(RoomAccess lhs__, RoomAccess rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        public void write__(IceInternal.BasicStream os__)
        {
            Chat.RoomPrxHelper.write__(os__, RoomProxy_prop);
            os__.writeString(SessionId_prop);
        }

        public void read__(IceInternal.BasicStream is__)
        {
            RoomProxy_prop = Chat.RoomPrxHelper.read__(is__);
            SessionId_prop = is__.readString();
        }

        #endregion
    }

    public partial interface Lobby : Ice.Object, LobbyOperations_, LobbyOperationsNC_
    {
    }
}

namespace Chat
{
    public delegate void Callback_Listener_NotifyPost();

    public delegate void Callback_Room_GetRoomName(string ret__);

    public delegate void Callback_Room_Say();

    public delegate void Callback_Room_LeaveRoom();

    public delegate void Callback_RoomV2_GetRoomName(string ret__);

    public delegate void Callback_RoomV2_Say();

    public delegate void Callback_RoomV2_LeaveRoom();

    public delegate void Callback_RoomAdm_Kick();

    public delegate void Callback_RoomAdm_GetParticipants(_System.Collections.Generic.List<string> ret__);

    public delegate void Callback_Lobby_Join(Chat.RoomAccess ret__);
}

namespace Chat
{
    public interface ListenerPrx : Ice.ObjectPrx
    {
        void NotifyPost(Chat.Post newPost);
        void NotifyPost(Chat.Post newPost, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Chat.Callback_Listener_NotifyPost> begin_NotifyPost(Chat.Post newPost);
        Ice.AsyncResult<Chat.Callback_Listener_NotifyPost> begin_NotifyPost(Chat.Post newPost, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_NotifyPost(Chat.Post newPost, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_NotifyPost(Chat.Post newPost, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_NotifyPost(Ice.AsyncResult r__);
    }

    public interface RoomPrx : Ice.ObjectPrx
    {
        string GetRoomName();
        string GetRoomName(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Chat.Callback_Room_GetRoomName> begin_GetRoomName();
        Ice.AsyncResult<Chat.Callback_Room_GetRoomName> begin_GetRoomName(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_GetRoomName(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_GetRoomName(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        string end_GetRoomName(Ice.AsyncResult r__);

        void Say(string message);
        void Say(string message, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Chat.Callback_Room_Say> begin_Say(string message);
        Ice.AsyncResult<Chat.Callback_Room_Say> begin_Say(string message, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_Say(string message, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_Say(string message, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_Say(Ice.AsyncResult r__);

        void LeaveRoom();
        void LeaveRoom(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Chat.Callback_Room_LeaveRoom> begin_LeaveRoom();
        Ice.AsyncResult<Chat.Callback_Room_LeaveRoom> begin_LeaveRoom(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_LeaveRoom(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_LeaveRoom(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_LeaveRoom(Ice.AsyncResult r__);
    }

    public interface RoomV2Prx : Ice.ObjectPrx
    {
        string GetRoomName();
        string GetRoomName(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Chat.Callback_RoomV2_GetRoomName> begin_GetRoomName();
        Ice.AsyncResult<Chat.Callback_RoomV2_GetRoomName> begin_GetRoomName(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_GetRoomName(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_GetRoomName(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        string end_GetRoomName(Ice.AsyncResult r__);

        void Say(string message, long time);
        void Say(string message, long time, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Chat.Callback_RoomV2_Say> begin_Say(string message, long time);
        Ice.AsyncResult<Chat.Callback_RoomV2_Say> begin_Say(string message, long time, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_Say(string message, long time, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_Say(string message, long time, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_Say(Ice.AsyncResult r__);

        void LeaveRoom();
        void LeaveRoom(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Chat.Callback_RoomV2_LeaveRoom> begin_LeaveRoom();
        Ice.AsyncResult<Chat.Callback_RoomV2_LeaveRoom> begin_LeaveRoom(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_LeaveRoom(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_LeaveRoom(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_LeaveRoom(Ice.AsyncResult r__);
    }

    public interface RoomAdmPrx : Chat.RoomPrx
    {
        void Kick(string nick);
        void Kick(string nick, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Chat.Callback_RoomAdm_Kick> begin_Kick(string nick);
        Ice.AsyncResult<Chat.Callback_RoomAdm_Kick> begin_Kick(string nick, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_Kick(string nick, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_Kick(string nick, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_Kick(Ice.AsyncResult r__);

        _System.Collections.Generic.List<string> GetParticipants();
        _System.Collections.Generic.List<string> GetParticipants(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Chat.Callback_RoomAdm_GetParticipants> begin_GetParticipants();
        Ice.AsyncResult<Chat.Callback_RoomAdm_GetParticipants> begin_GetParticipants(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_GetParticipants(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_GetParticipants(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        _System.Collections.Generic.List<string> end_GetParticipants(Ice.AsyncResult r__);
    }

    public interface LobbyPrx : Ice.ObjectPrx
    {
        Chat.RoomAccess Join(string nick, string topic, Ice.Identity listenerIdentity);
        Chat.RoomAccess Join(string nick, string topic, Ice.Identity listenerIdentity, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Chat.Callback_Lobby_Join> begin_Join(string nick, string topic, Ice.Identity listenerIdentity);
        Ice.AsyncResult<Chat.Callback_Lobby_Join> begin_Join(string nick, string topic, Ice.Identity listenerIdentity, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_Join(string nick, string topic, Ice.Identity listenerIdentity, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_Join(string nick, string topic, Ice.Identity listenerIdentity, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Chat.RoomAccess end_Join(Ice.AsyncResult r__);
    }
}

namespace Chat
{
    public interface ListenerOperations_
    {
        void NotifyPost_async(Chat.AMD_Listener_NotifyPost cb__, Chat.Post newPost, Ice.Current current__);
    }

    public interface ListenerOperationsNC_
    {
        void NotifyPost_async(Chat.AMD_Listener_NotifyPost cb__, Chat.Post newPost);
    }

    public interface RoomOperations_
    {
        string GetRoomName(Ice.Current current__);

        void Say(string message, Ice.Current current__);

        void LeaveRoom(Ice.Current current__);
    }

    public interface RoomOperationsNC_
    {
        string GetRoomName();

        void Say(string message);

        void LeaveRoom();
    }

    public interface RoomV2Operations_
    {
        string GetRoomName(Ice.Current current__);

        void Say(string message, long time, Ice.Current current__);

        void LeaveRoom(Ice.Current current__);
    }

    public interface RoomV2OperationsNC_
    {
        string GetRoomName();

        void Say(string message, long time);

        void LeaveRoom();
    }

    public interface RoomAdmOperations_ : Chat.RoomOperations_
    {
        void Kick(string nick, Ice.Current current__);

        _System.Collections.Generic.List<string> GetParticipants(Ice.Current current__);
    }

    public interface RoomAdmOperationsNC_ : Chat.RoomOperationsNC_
    {
        void Kick(string nick);

        _System.Collections.Generic.List<string> GetParticipants();
    }

    public interface LobbyOperations_
    {
        Chat.RoomAccess Join(string nick, string topic, Ice.Identity listenerIdentity, Ice.Current current__);
    }

    public interface LobbyOperationsNC_
    {
        Chat.RoomAccess Join(string nick, string topic, Ice.Identity listenerIdentity);
    }
}

namespace Chat
{
    public sealed class ListenerPrxHelper : Ice.ObjectPrxHelperBase, ListenerPrx
    {
        #region Synchronous operations

        public void NotifyPost(Chat.Post newPost)
        {
            NotifyPost(newPost, null, false);
        }

        public void NotifyPost(Chat.Post newPost, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            NotifyPost(newPost, context__, true);
        }

        private void NotifyPost(Chat.Post newPost, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    delBase__ = getDelegate__(false);
                    ListenerDel_ del__ = (ListenerDel_)delBase__;
                    del__.NotifyPost(newPost, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Chat.Callback_Listener_NotifyPost> begin_NotifyPost(Chat.Post newPost)
        {
            return begin_NotifyPost(newPost, null, false, null, null);
        }

        public Ice.AsyncResult<Chat.Callback_Listener_NotifyPost> begin_NotifyPost(Chat.Post newPost, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_NotifyPost(newPost, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_NotifyPost(Chat.Post newPost, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_NotifyPost(newPost, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_NotifyPost(Chat.Post newPost, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_NotifyPost(newPost, ctx__, true, cb__, cookie__);
        }

        private const string __NotifyPost_name = "NotifyPost";

        public void end_NotifyPost(Ice.AsyncResult r__)
        {
            end__(r__, __NotifyPost_name);
        }

        private Ice.AsyncResult<Chat.Callback_Listener_NotifyPost> begin_NotifyPost(Chat.Post newPost, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<Chat.Callback_Listener_NotifyPost> result__ = new IceInternal.OnewayOutgoingAsync<Chat.Callback_Listener_NotifyPost>(this, __NotifyPost_name, NotifyPost_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__NotifyPost_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                if(newPost == null)
                {
                    Chat.Post tmp__ = new Chat.Post();
                    tmp__.write__(os__);
                }
                else
                {
                    newPost.write__(os__);
                }
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void NotifyPost_completed__(Chat.Callback_Listener_NotifyPost cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static ListenerPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ListenerPrx r = b as ListenerPrx;
            if((r == null) && b.ice_isA("::Chat::Listener"))
            {
                ListenerPrxHelper h = new ListenerPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static ListenerPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            ListenerPrx r = b as ListenerPrx;
            if((r == null) && b.ice_isA("::Chat::Listener", ctx))
            {
                ListenerPrxHelper h = new ListenerPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static ListenerPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA("::Chat::Listener"))
                {
                    ListenerPrxHelper h = new ListenerPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ListenerPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA("::Chat::Listener", ctx))
                {
                    ListenerPrxHelper h = new ListenerPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ListenerPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ListenerPrx r = b as ListenerPrx;
            if(r == null)
            {
                ListenerPrxHelper h = new ListenerPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static ListenerPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            ListenerPrxHelper h = new ListenerPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new ListenerDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new ListenerDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, ListenerPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static ListenerPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                ListenerPrxHelper result = new ListenerPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    public sealed class RoomPrxHelper : Ice.ObjectPrxHelperBase, RoomPrx
    {
        #region Synchronous operations

        public string GetRoomName()
        {
            return GetRoomName(null, false);
        }

        public string GetRoomName(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            return GetRoomName(context__, true);
        }

        private string GetRoomName(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("GetRoomName");
                    delBase__ = getDelegate__(false);
                    RoomDel_ del__ = (RoomDel_)delBase__;
                    return del__.GetRoomName(context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public void LeaveRoom()
        {
            LeaveRoom(null, false);
        }

        public void LeaveRoom(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            LeaveRoom(context__, true);
        }

        private void LeaveRoom(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("LeaveRoom");
                    delBase__ = getDelegate__(false);
                    RoomDel_ del__ = (RoomDel_)delBase__;
                    del__.LeaveRoom(context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public void Say(string message)
        {
            Say(message, null, false);
        }

        public void Say(string message, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Say(message, context__, true);
        }

        private void Say(string message, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("Say");
                    delBase__ = getDelegate__(false);
                    RoomDel_ del__ = (RoomDel_)delBase__;
                    del__.Say(message, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Chat.Callback_Room_GetRoomName> begin_GetRoomName()
        {
            return begin_GetRoomName(null, false, null, null);
        }

        public Ice.AsyncResult<Chat.Callback_Room_GetRoomName> begin_GetRoomName(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetRoomName(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_GetRoomName(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetRoomName(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetRoomName(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetRoomName(ctx__, true, cb__, cookie__);
        }

        private const string __GetRoomName_name = "GetRoomName";

        public string end_GetRoomName(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __GetRoomName_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            string ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readString();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Chat.Callback_Room_GetRoomName> begin_GetRoomName(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetRoomName_name);
            IceInternal.TwowayOutgoingAsync<Chat.Callback_Room_GetRoomName> result__ =  new IceInternal.TwowayOutgoingAsync<Chat.Callback_Room_GetRoomName>(this, __GetRoomName_name, GetRoomName_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__GetRoomName_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void GetRoomName_completed__(Ice.AsyncResult r__, Chat.Callback_Room_GetRoomName cb__, Ice.ExceptionCallback excb__)
        {
            string ret__;
            try
            {
                ret__ = end_GetRoomName(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Chat.Callback_Room_LeaveRoom> begin_LeaveRoom()
        {
            return begin_LeaveRoom(null, false, null, null);
        }

        public Ice.AsyncResult<Chat.Callback_Room_LeaveRoom> begin_LeaveRoom(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_LeaveRoom(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_LeaveRoom(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_LeaveRoom(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_LeaveRoom(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_LeaveRoom(ctx__, true, cb__, cookie__);
        }

        private const string __LeaveRoom_name = "LeaveRoom";

        public void end_LeaveRoom(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __LeaveRoom_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Chat.IllegalChatSessionException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
        }

        private Ice.AsyncResult<Chat.Callback_Room_LeaveRoom> begin_LeaveRoom(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__LeaveRoom_name);
            IceInternal.TwowayOutgoingAsync<Chat.Callback_Room_LeaveRoom> result__ =  new IceInternal.TwowayOutgoingAsync<Chat.Callback_Room_LeaveRoom>(this, __LeaveRoom_name, LeaveRoom_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__LeaveRoom_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void LeaveRoom_completed__(Ice.AsyncResult r__, Chat.Callback_Room_LeaveRoom cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_LeaveRoom(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Chat.Callback_Room_Say> begin_Say(string message)
        {
            return begin_Say(message, null, false, null, null);
        }

        public Ice.AsyncResult<Chat.Callback_Room_Say> begin_Say(string message, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_Say(message, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_Say(string message, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_Say(message, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_Say(string message, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_Say(message, ctx__, true, cb__, cookie__);
        }

        private const string __Say_name = "Say";

        public void end_Say(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __Say_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Chat.IllegalChatSessionException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
        }

        private Ice.AsyncResult<Chat.Callback_Room_Say> begin_Say(string message, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__Say_name);
            IceInternal.TwowayOutgoingAsync<Chat.Callback_Room_Say> result__ =  new IceInternal.TwowayOutgoingAsync<Chat.Callback_Room_Say>(this, __Say_name, Say_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__Say_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(message);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void Say_completed__(Ice.AsyncResult r__, Chat.Callback_Room_Say cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_Say(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static RoomPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            RoomPrx r = b as RoomPrx;
            if((r == null) && b.ice_isA("::Chat::Room"))
            {
                RoomPrxHelper h = new RoomPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static RoomPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            RoomPrx r = b as RoomPrx;
            if((r == null) && b.ice_isA("::Chat::Room", ctx))
            {
                RoomPrxHelper h = new RoomPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static RoomPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA("::Chat::Room"))
                {
                    RoomPrxHelper h = new RoomPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static RoomPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA("::Chat::Room", ctx))
                {
                    RoomPrxHelper h = new RoomPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static RoomPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            RoomPrx r = b as RoomPrx;
            if(r == null)
            {
                RoomPrxHelper h = new RoomPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static RoomPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            RoomPrxHelper h = new RoomPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new RoomDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new RoomDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, RoomPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static RoomPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                RoomPrxHelper result = new RoomPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    public sealed class RoomV2PrxHelper : Ice.ObjectPrxHelperBase, RoomV2Prx
    {
        #region Synchronous operations

        public string GetRoomName()
        {
            return GetRoomName(null, false);
        }

        public string GetRoomName(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            return GetRoomName(context__, true);
        }

        private string GetRoomName(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("GetRoomName");
                    delBase__ = getDelegate__(false);
                    RoomV2Del_ del__ = (RoomV2Del_)delBase__;
                    return del__.GetRoomName(context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public void LeaveRoom()
        {
            LeaveRoom(null, false);
        }

        public void LeaveRoom(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            LeaveRoom(context__, true);
        }

        private void LeaveRoom(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("LeaveRoom");
                    delBase__ = getDelegate__(false);
                    RoomV2Del_ del__ = (RoomV2Del_)delBase__;
                    del__.LeaveRoom(context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public void Say(string message, long time)
        {
            Say(message, time, null, false);
        }

        public void Say(string message, long time, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Say(message, time, context__, true);
        }

        private void Say(string message, long time, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("Say");
                    delBase__ = getDelegate__(false);
                    RoomV2Del_ del__ = (RoomV2Del_)delBase__;
                    del__.Say(message, time, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Chat.Callback_RoomV2_GetRoomName> begin_GetRoomName()
        {
            return begin_GetRoomName(null, false, null, null);
        }

        public Ice.AsyncResult<Chat.Callback_RoomV2_GetRoomName> begin_GetRoomName(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetRoomName(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_GetRoomName(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetRoomName(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetRoomName(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetRoomName(ctx__, true, cb__, cookie__);
        }

        private const string __GetRoomName_name = "GetRoomName";

        public string end_GetRoomName(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __GetRoomName_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            string ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readString();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Chat.Callback_RoomV2_GetRoomName> begin_GetRoomName(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetRoomName_name);
            IceInternal.TwowayOutgoingAsync<Chat.Callback_RoomV2_GetRoomName> result__ =  new IceInternal.TwowayOutgoingAsync<Chat.Callback_RoomV2_GetRoomName>(this, __GetRoomName_name, GetRoomName_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__GetRoomName_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void GetRoomName_completed__(Ice.AsyncResult r__, Chat.Callback_RoomV2_GetRoomName cb__, Ice.ExceptionCallback excb__)
        {
            string ret__;
            try
            {
                ret__ = end_GetRoomName(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Chat.Callback_RoomV2_LeaveRoom> begin_LeaveRoom()
        {
            return begin_LeaveRoom(null, false, null, null);
        }

        public Ice.AsyncResult<Chat.Callback_RoomV2_LeaveRoom> begin_LeaveRoom(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_LeaveRoom(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_LeaveRoom(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_LeaveRoom(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_LeaveRoom(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_LeaveRoom(ctx__, true, cb__, cookie__);
        }

        private const string __LeaveRoom_name = "LeaveRoom";

        public void end_LeaveRoom(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __LeaveRoom_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Chat.IllegalChatSessionException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
        }

        private Ice.AsyncResult<Chat.Callback_RoomV2_LeaveRoom> begin_LeaveRoom(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__LeaveRoom_name);
            IceInternal.TwowayOutgoingAsync<Chat.Callback_RoomV2_LeaveRoom> result__ =  new IceInternal.TwowayOutgoingAsync<Chat.Callback_RoomV2_LeaveRoom>(this, __LeaveRoom_name, LeaveRoom_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__LeaveRoom_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void LeaveRoom_completed__(Ice.AsyncResult r__, Chat.Callback_RoomV2_LeaveRoom cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_LeaveRoom(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Chat.Callback_RoomV2_Say> begin_Say(string message, long time)
        {
            return begin_Say(message, time, null, false, null, null);
        }

        public Ice.AsyncResult<Chat.Callback_RoomV2_Say> begin_Say(string message, long time, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_Say(message, time, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_Say(string message, long time, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_Say(message, time, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_Say(string message, long time, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_Say(message, time, ctx__, true, cb__, cookie__);
        }

        private const string __Say_name = "Say";

        public void end_Say(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __Say_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Chat.IllegalChatSessionException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
        }

        private Ice.AsyncResult<Chat.Callback_RoomV2_Say> begin_Say(string message, long time, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__Say_name);
            IceInternal.TwowayOutgoingAsync<Chat.Callback_RoomV2_Say> result__ =  new IceInternal.TwowayOutgoingAsync<Chat.Callback_RoomV2_Say>(this, __Say_name, Say_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__Say_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(message);
                os__.writeLong(time);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void Say_completed__(Ice.AsyncResult r__, Chat.Callback_RoomV2_Say cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_Say(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static RoomV2Prx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            RoomV2Prx r = b as RoomV2Prx;
            if((r == null) && b.ice_isA("::Chat::RoomV2"))
            {
                RoomV2PrxHelper h = new RoomV2PrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static RoomV2Prx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            RoomV2Prx r = b as RoomV2Prx;
            if((r == null) && b.ice_isA("::Chat::RoomV2", ctx))
            {
                RoomV2PrxHelper h = new RoomV2PrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static RoomV2Prx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA("::Chat::RoomV2"))
                {
                    RoomV2PrxHelper h = new RoomV2PrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static RoomV2Prx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA("::Chat::RoomV2", ctx))
                {
                    RoomV2PrxHelper h = new RoomV2PrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static RoomV2Prx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            RoomV2Prx r = b as RoomV2Prx;
            if(r == null)
            {
                RoomV2PrxHelper h = new RoomV2PrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static RoomV2Prx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            RoomV2PrxHelper h = new RoomV2PrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new RoomV2DelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new RoomV2DelD_();
        }

        public static void write__(IceInternal.BasicStream os__, RoomV2Prx v__)
        {
            os__.writeProxy(v__);
        }

        public static RoomV2Prx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                RoomV2PrxHelper result = new RoomV2PrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    public sealed class ParticipantsHelper
    {
        public static void write(IceInternal.BasicStream os__, _System.Collections.Generic.List<string> v__)
        {
            os__.writeStringSeq(v__ == null ? 0 : v__.Count, v__);
        }

        public static _System.Collections.Generic.List<string> read(IceInternal.BasicStream is__)
        {
            _System.Collections.Generic.List<string> v__;
            is__.readStringSeq(out v__);
            return v__;
        }
    }

    public sealed class RoomAdmPrxHelper : Ice.ObjectPrxHelperBase, RoomAdmPrx
    {
        #region Synchronous operations

        public string GetRoomName()
        {
            return GetRoomName(null, false);
        }

        public string GetRoomName(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            return GetRoomName(context__, true);
        }

        private string GetRoomName(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("GetRoomName");
                    delBase__ = getDelegate__(false);
                    RoomAdmDel_ del__ = (RoomAdmDel_)delBase__;
                    return del__.GetRoomName(context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public void LeaveRoom()
        {
            LeaveRoom(null, false);
        }

        public void LeaveRoom(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            LeaveRoom(context__, true);
        }

        private void LeaveRoom(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("LeaveRoom");
                    delBase__ = getDelegate__(false);
                    RoomAdmDel_ del__ = (RoomAdmDel_)delBase__;
                    del__.LeaveRoom(context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public void Say(string message)
        {
            Say(message, null, false);
        }

        public void Say(string message, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Say(message, context__, true);
        }

        private void Say(string message, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("Say");
                    delBase__ = getDelegate__(false);
                    RoomAdmDel_ del__ = (RoomAdmDel_)delBase__;
                    del__.Say(message, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public _System.Collections.Generic.List<string> GetParticipants()
        {
            return GetParticipants(null, false);
        }

        public _System.Collections.Generic.List<string> GetParticipants(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            return GetParticipants(context__, true);
        }

        private _System.Collections.Generic.List<string> GetParticipants(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("GetParticipants");
                    delBase__ = getDelegate__(false);
                    RoomAdmDel_ del__ = (RoomAdmDel_)delBase__;
                    return del__.GetParticipants(context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public void Kick(string nick)
        {
            Kick(nick, null, false);
        }

        public void Kick(string nick, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Kick(nick, context__, true);
        }

        private void Kick(string nick, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("Kick");
                    delBase__ = getDelegate__(false);
                    RoomAdmDel_ del__ = (RoomAdmDel_)delBase__;
                    del__.Kick(nick, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Chat.Callback_Room_GetRoomName> begin_GetRoomName()
        {
            return begin_GetRoomName(null, false, null, null);
        }

        public Ice.AsyncResult<Chat.Callback_Room_GetRoomName> begin_GetRoomName(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetRoomName(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_GetRoomName(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetRoomName(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetRoomName(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetRoomName(ctx__, true, cb__, cookie__);
        }

        private const string __GetRoomName_name = "GetRoomName";

        public string end_GetRoomName(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __GetRoomName_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            string ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readString();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Chat.Callback_Room_GetRoomName> begin_GetRoomName(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetRoomName_name);
            IceInternal.TwowayOutgoingAsync<Chat.Callback_Room_GetRoomName> result__ =  new IceInternal.TwowayOutgoingAsync<Chat.Callback_Room_GetRoomName>(this, __GetRoomName_name, GetRoomName_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__GetRoomName_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void GetRoomName_completed__(Ice.AsyncResult r__, Chat.Callback_Room_GetRoomName cb__, Ice.ExceptionCallback excb__)
        {
            string ret__;
            try
            {
                ret__ = end_GetRoomName(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Chat.Callback_Room_LeaveRoom> begin_LeaveRoom()
        {
            return begin_LeaveRoom(null, false, null, null);
        }

        public Ice.AsyncResult<Chat.Callback_Room_LeaveRoom> begin_LeaveRoom(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_LeaveRoom(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_LeaveRoom(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_LeaveRoom(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_LeaveRoom(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_LeaveRoom(ctx__, true, cb__, cookie__);
        }

        private const string __LeaveRoom_name = "LeaveRoom";

        public void end_LeaveRoom(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __LeaveRoom_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Chat.IllegalChatSessionException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
        }

        private Ice.AsyncResult<Chat.Callback_Room_LeaveRoom> begin_LeaveRoom(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__LeaveRoom_name);
            IceInternal.TwowayOutgoingAsync<Chat.Callback_Room_LeaveRoom> result__ =  new IceInternal.TwowayOutgoingAsync<Chat.Callback_Room_LeaveRoom>(this, __LeaveRoom_name, LeaveRoom_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__LeaveRoom_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void LeaveRoom_completed__(Ice.AsyncResult r__, Chat.Callback_Room_LeaveRoom cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_LeaveRoom(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Chat.Callback_Room_Say> begin_Say(string message)
        {
            return begin_Say(message, null, false, null, null);
        }

        public Ice.AsyncResult<Chat.Callback_Room_Say> begin_Say(string message, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_Say(message, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_Say(string message, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_Say(message, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_Say(string message, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_Say(message, ctx__, true, cb__, cookie__);
        }

        private const string __Say_name = "Say";

        public void end_Say(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __Say_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Chat.IllegalChatSessionException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
        }

        private Ice.AsyncResult<Chat.Callback_Room_Say> begin_Say(string message, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__Say_name);
            IceInternal.TwowayOutgoingAsync<Chat.Callback_Room_Say> result__ =  new IceInternal.TwowayOutgoingAsync<Chat.Callback_Room_Say>(this, __Say_name, Say_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__Say_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(message);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void Say_completed__(Ice.AsyncResult r__, Chat.Callback_Room_Say cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_Say(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Chat.Callback_RoomAdm_GetParticipants> begin_GetParticipants()
        {
            return begin_GetParticipants(null, false, null, null);
        }

        public Ice.AsyncResult<Chat.Callback_RoomAdm_GetParticipants> begin_GetParticipants(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetParticipants(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_GetParticipants(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetParticipants(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetParticipants(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetParticipants(ctx__, true, cb__, cookie__);
        }

        private const string __GetParticipants_name = "GetParticipants";

        public _System.Collections.Generic.List<string> end_GetParticipants(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __GetParticipants_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            _System.Collections.Generic.List<string> ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            is__.readStringSeq(out ret__);
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Chat.Callback_RoomAdm_GetParticipants> begin_GetParticipants(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetParticipants_name);
            IceInternal.TwowayOutgoingAsync<Chat.Callback_RoomAdm_GetParticipants> result__ =  new IceInternal.TwowayOutgoingAsync<Chat.Callback_RoomAdm_GetParticipants>(this, __GetParticipants_name, GetParticipants_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__GetParticipants_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void GetParticipants_completed__(Ice.AsyncResult r__, Chat.Callback_RoomAdm_GetParticipants cb__, Ice.ExceptionCallback excb__)
        {
            _System.Collections.Generic.List<string> ret__;
            try
            {
                ret__ = end_GetParticipants(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Chat.Callback_RoomAdm_Kick> begin_Kick(string nick)
        {
            return begin_Kick(nick, null, false, null, null);
        }

        public Ice.AsyncResult<Chat.Callback_RoomAdm_Kick> begin_Kick(string nick, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_Kick(nick, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_Kick(string nick, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_Kick(nick, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_Kick(string nick, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_Kick(nick, ctx__, true, cb__, cookie__);
        }

        private const string __Kick_name = "Kick";

        public void end_Kick(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __Kick_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Chat.IChatException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
        }

        private Ice.AsyncResult<Chat.Callback_RoomAdm_Kick> begin_Kick(string nick, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__Kick_name);
            IceInternal.TwowayOutgoingAsync<Chat.Callback_RoomAdm_Kick> result__ =  new IceInternal.TwowayOutgoingAsync<Chat.Callback_RoomAdm_Kick>(this, __Kick_name, Kick_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__Kick_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(nick);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void Kick_completed__(Ice.AsyncResult r__, Chat.Callback_RoomAdm_Kick cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_Kick(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static RoomAdmPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            RoomAdmPrx r = b as RoomAdmPrx;
            if((r == null) && b.ice_isA("::Chat::RoomAdm"))
            {
                RoomAdmPrxHelper h = new RoomAdmPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static RoomAdmPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            RoomAdmPrx r = b as RoomAdmPrx;
            if((r == null) && b.ice_isA("::Chat::RoomAdm", ctx))
            {
                RoomAdmPrxHelper h = new RoomAdmPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static RoomAdmPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA("::Chat::RoomAdm"))
                {
                    RoomAdmPrxHelper h = new RoomAdmPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static RoomAdmPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA("::Chat::RoomAdm", ctx))
                {
                    RoomAdmPrxHelper h = new RoomAdmPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static RoomAdmPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            RoomAdmPrx r = b as RoomAdmPrx;
            if(r == null)
            {
                RoomAdmPrxHelper h = new RoomAdmPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static RoomAdmPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            RoomAdmPrxHelper h = new RoomAdmPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new RoomAdmDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new RoomAdmDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, RoomAdmPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static RoomAdmPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                RoomAdmPrxHelper result = new RoomAdmPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    public sealed class LobbyPrxHelper : Ice.ObjectPrxHelperBase, LobbyPrx
    {
        #region Synchronous operations

        public Chat.RoomAccess Join(string nick, string topic, Ice.Identity listenerIdentity)
        {
            return Join(nick, topic, listenerIdentity, null, false);
        }

        public Chat.RoomAccess Join(string nick, string topic, Ice.Identity listenerIdentity, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return Join(nick, topic, listenerIdentity, context__, true);
        }

        private Chat.RoomAccess Join(string nick, string topic, Ice.Identity listenerIdentity, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("Join");
                    delBase__ = getDelegate__(false);
                    LobbyDel_ del__ = (LobbyDel_)delBase__;
                    return del__.Join(nick, topic, listenerIdentity, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Chat.Callback_Lobby_Join> begin_Join(string nick, string topic, Ice.Identity listenerIdentity)
        {
            return begin_Join(nick, topic, listenerIdentity, null, false, null, null);
        }

        public Ice.AsyncResult<Chat.Callback_Lobby_Join> begin_Join(string nick, string topic, Ice.Identity listenerIdentity, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_Join(nick, topic, listenerIdentity, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_Join(string nick, string topic, Ice.Identity listenerIdentity, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_Join(nick, topic, listenerIdentity, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_Join(string nick, string topic, Ice.Identity listenerIdentity, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_Join(nick, topic, listenerIdentity, ctx__, true, cb__, cookie__);
        }

        private const string __Join_name = "Join";

        public Chat.RoomAccess end_Join(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __Join_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Chat.IChatException)
                {
                    throw;
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            Chat.RoomAccess ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = null;
            if(ret__ == null)
            {
                ret__ = new Chat.RoomAccess();
            }
            ret__.read__(is__);
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Chat.Callback_Lobby_Join> begin_Join(string nick, string topic, Ice.Identity listenerIdentity, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__Join_name);
            IceInternal.TwowayOutgoingAsync<Chat.Callback_Lobby_Join> result__ =  new IceInternal.TwowayOutgoingAsync<Chat.Callback_Lobby_Join>(this, __Join_name, Join_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__Join_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(nick);
                os__.writeString(topic);
                if(listenerIdentity == null)
                {
                    Ice.Identity tmp__ = new Ice.Identity();
                    tmp__.write__(os__);
                }
                else
                {
                    listenerIdentity.write__(os__);
                }
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void Join_completed__(Ice.AsyncResult r__, Chat.Callback_Lobby_Join cb__, Ice.ExceptionCallback excb__)
        {
            Chat.RoomAccess ret__;
            try
            {
                ret__ = end_Join(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static LobbyPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            LobbyPrx r = b as LobbyPrx;
            if((r == null) && b.ice_isA("::Chat::Lobby"))
            {
                LobbyPrxHelper h = new LobbyPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static LobbyPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            LobbyPrx r = b as LobbyPrx;
            if((r == null) && b.ice_isA("::Chat::Lobby", ctx))
            {
                LobbyPrxHelper h = new LobbyPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static LobbyPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA("::Chat::Lobby"))
                {
                    LobbyPrxHelper h = new LobbyPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static LobbyPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA("::Chat::Lobby", ctx))
                {
                    LobbyPrxHelper h = new LobbyPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static LobbyPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            LobbyPrx r = b as LobbyPrx;
            if(r == null)
            {
                LobbyPrxHelper h = new LobbyPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static LobbyPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            LobbyPrxHelper h = new LobbyPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new LobbyDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new LobbyDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, LobbyPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static LobbyPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                LobbyPrxHelper result = new LobbyPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Chat
{
    public interface ListenerDel_ : Ice.ObjectDel_
    {
        void NotifyPost(Chat.Post newPost, _System.Collections.Generic.Dictionary<string, string> context__);
    }

    public interface RoomDel_ : Ice.ObjectDel_
    {
        string GetRoomName(_System.Collections.Generic.Dictionary<string, string> context__);

        void Say(string message, _System.Collections.Generic.Dictionary<string, string> context__);

        void LeaveRoom(_System.Collections.Generic.Dictionary<string, string> context__);
    }

    public interface RoomV2Del_ : Ice.ObjectDel_
    {
        string GetRoomName(_System.Collections.Generic.Dictionary<string, string> context__);

        void Say(string message, long time, _System.Collections.Generic.Dictionary<string, string> context__);

        void LeaveRoom(_System.Collections.Generic.Dictionary<string, string> context__);
    }

    public interface RoomAdmDel_ : Chat.RoomDel_
    {
        void Kick(string nick, _System.Collections.Generic.Dictionary<string, string> context__);

        _System.Collections.Generic.List<string> GetParticipants(_System.Collections.Generic.Dictionary<string, string> context__);
    }

    public interface LobbyDel_ : Ice.ObjectDel_
    {
        Chat.RoomAccess Join(string nick, string topic, Ice.Identity listenerIdentity, _System.Collections.Generic.Dictionary<string, string> context__);
    }
}

namespace Chat
{
    public sealed class ListenerDelM_ : Ice.ObjectDelM_, ListenerDel_
    {
        public void NotifyPost(Chat.Post newPost, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("NotifyPost", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    if(newPost == null)
                    {
                        Chat.Post tmp__ = new Chat.Post();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        newPost.write__(os__);
                    }
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(!og__.istr().isEmpty())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.istr().skipEmptyEncaps();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }
    }

    public sealed class RoomDelM_ : Ice.ObjectDelM_, RoomDel_
    {
        public string GetRoomName(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("GetRoomName", Ice.OperationMode.Idempotent, context__);
            try
            {
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    string ret__;
                    ret__ = is__.readString();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void LeaveRoom(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("LeaveRoom", Ice.OperationMode.Normal, context__);
            try
            {
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Chat.IllegalChatSessionException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.istr().skipEmptyEncaps();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void Say(string message, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("Say", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(message);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Chat.IllegalChatSessionException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.istr().skipEmptyEncaps();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }
    }

    public sealed class RoomV2DelM_ : Ice.ObjectDelM_, RoomV2Del_
    {
        public string GetRoomName(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("GetRoomName", Ice.OperationMode.Idempotent, context__);
            try
            {
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    string ret__;
                    ret__ = is__.readString();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void LeaveRoom(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("LeaveRoom", Ice.OperationMode.Normal, context__);
            try
            {
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Chat.IllegalChatSessionException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.istr().skipEmptyEncaps();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void Say(string message, long time, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("Say", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(message);
                    os__.writeLong(time);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Chat.IllegalChatSessionException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.istr().skipEmptyEncaps();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }
    }

    public sealed class RoomAdmDelM_ : Ice.ObjectDelM_, RoomAdmDel_
    {
        public string GetRoomName(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("GetRoomName", Ice.OperationMode.Idempotent, context__);
            try
            {
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    string ret__;
                    ret__ = is__.readString();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void LeaveRoom(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("LeaveRoom", Ice.OperationMode.Normal, context__);
            try
            {
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Chat.IllegalChatSessionException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.istr().skipEmptyEncaps();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void Say(string message, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("Say", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(message);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Chat.IllegalChatSessionException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.istr().skipEmptyEncaps();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public _System.Collections.Generic.List<string> GetParticipants(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("GetParticipants", Ice.OperationMode.Idempotent, context__);
            try
            {
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    _System.Collections.Generic.List<string> ret__;
                    is__.readStringSeq(out ret__);
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void Kick(string nick, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("Kick", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(nick);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Chat.IChatException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.istr().skipEmptyEncaps();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }
    }

    public sealed class LobbyDelM_ : Ice.ObjectDelM_, LobbyDel_
    {
        public Chat.RoomAccess Join(string nick, string topic, Ice.Identity listenerIdentity, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("Join", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(nick);
                    os__.writeString(topic);
                    if(listenerIdentity == null)
                    {
                        Ice.Identity tmp__ = new Ice.Identity();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        listenerIdentity.write__(os__);
                    }
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Chat.IChatException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    Chat.RoomAccess ret__;
                    ret__ = null;
                    if(ret__ == null)
                    {
                        ret__ = new Chat.RoomAccess();
                    }
                    ret__.read__(is__);
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }
    }
}

namespace Chat
{
    public sealed class ListenerDelD_ : Ice.ObjectDelD_, ListenerDel_
    {
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void NotifyPost(Chat.Post newPost, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }
    }

    public sealed class RoomDelD_ : Ice.ObjectDelD_, RoomDel_
    {
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public string GetRoomName(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "GetRoomName", Ice.OperationMode.Idempotent, context__);
            string result__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Room servant__ = null;
                try
                {
                    servant__ = (Room)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.GetRoomName(current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void LeaveRoom(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "LeaveRoom", Ice.OperationMode.Normal, context__);
            Ice.UserException userException__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Room servant__ = null;
                try
                {
                    servant__ = (Room)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                try
                {
                    servant__.LeaveRoom(current__);
                    return Ice.DispatchStatus.DispatchOK;
                }
                catch(Ice.UserException ex__)
                {
                    userException__ = ex__;
                    return Ice.DispatchStatus.DispatchUserException;
                }
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    if(status__ == Ice.DispatchStatus.DispatchUserException)
                    {
                        throw userException__;
                    }
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Chat.IllegalChatSessionException)
            {
                throw;
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void Say(string message, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "Say", Ice.OperationMode.Normal, context__);
            Ice.UserException userException__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Room servant__ = null;
                try
                {
                    servant__ = (Room)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                try
                {
                    servant__.Say(message, current__);
                    return Ice.DispatchStatus.DispatchOK;
                }
                catch(Ice.UserException ex__)
                {
                    userException__ = ex__;
                    return Ice.DispatchStatus.DispatchUserException;
                }
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    if(status__ == Ice.DispatchStatus.DispatchUserException)
                    {
                        throw userException__;
                    }
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Chat.IllegalChatSessionException)
            {
                throw;
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }
    }

    public sealed class RoomV2DelD_ : Ice.ObjectDelD_, RoomV2Del_
    {
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public string GetRoomName(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "GetRoomName", Ice.OperationMode.Idempotent, context__);
            string result__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                RoomV2 servant__ = null;
                try
                {
                    servant__ = (RoomV2)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.GetRoomName(current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void LeaveRoom(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "LeaveRoom", Ice.OperationMode.Normal, context__);
            Ice.UserException userException__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                RoomV2 servant__ = null;
                try
                {
                    servant__ = (RoomV2)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                try
                {
                    servant__.LeaveRoom(current__);
                    return Ice.DispatchStatus.DispatchOK;
                }
                catch(Ice.UserException ex__)
                {
                    userException__ = ex__;
                    return Ice.DispatchStatus.DispatchUserException;
                }
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    if(status__ == Ice.DispatchStatus.DispatchUserException)
                    {
                        throw userException__;
                    }
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Chat.IllegalChatSessionException)
            {
                throw;
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void Say(string message, long time, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "Say", Ice.OperationMode.Normal, context__);
            Ice.UserException userException__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                RoomV2 servant__ = null;
                try
                {
                    servant__ = (RoomV2)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                try
                {
                    servant__.Say(message, time, current__);
                    return Ice.DispatchStatus.DispatchOK;
                }
                catch(Ice.UserException ex__)
                {
                    userException__ = ex__;
                    return Ice.DispatchStatus.DispatchUserException;
                }
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    if(status__ == Ice.DispatchStatus.DispatchUserException)
                    {
                        throw userException__;
                    }
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Chat.IllegalChatSessionException)
            {
                throw;
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }
    }

    public sealed class RoomAdmDelD_ : Ice.ObjectDelD_, RoomAdmDel_
    {
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public string GetRoomName(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "GetRoomName", Ice.OperationMode.Idempotent, context__);
            string result__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                RoomAdm servant__ = null;
                try
                {
                    servant__ = (RoomAdm)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.GetRoomName(current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void LeaveRoom(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "LeaveRoom", Ice.OperationMode.Normal, context__);
            Ice.UserException userException__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                RoomAdm servant__ = null;
                try
                {
                    servant__ = (RoomAdm)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                try
                {
                    servant__.LeaveRoom(current__);
                    return Ice.DispatchStatus.DispatchOK;
                }
                catch(Ice.UserException ex__)
                {
                    userException__ = ex__;
                    return Ice.DispatchStatus.DispatchUserException;
                }
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    if(status__ == Ice.DispatchStatus.DispatchUserException)
                    {
                        throw userException__;
                    }
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Chat.IllegalChatSessionException)
            {
                throw;
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void Say(string message, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "Say", Ice.OperationMode.Normal, context__);
            Ice.UserException userException__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                RoomAdm servant__ = null;
                try
                {
                    servant__ = (RoomAdm)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                try
                {
                    servant__.Say(message, current__);
                    return Ice.DispatchStatus.DispatchOK;
                }
                catch(Ice.UserException ex__)
                {
                    userException__ = ex__;
                    return Ice.DispatchStatus.DispatchUserException;
                }
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    if(status__ == Ice.DispatchStatus.DispatchUserException)
                    {
                        throw userException__;
                    }
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Chat.IllegalChatSessionException)
            {
                throw;
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public _System.Collections.Generic.List<string> GetParticipants(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "GetParticipants", Ice.OperationMode.Idempotent, context__);
            _System.Collections.Generic.List<string> result__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                RoomAdm servant__ = null;
                try
                {
                    servant__ = (RoomAdm)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.GetParticipants(current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void Kick(string nick, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "Kick", Ice.OperationMode.Normal, context__);
            Ice.UserException userException__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                RoomAdm servant__ = null;
                try
                {
                    servant__ = (RoomAdm)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                try
                {
                    servant__.Kick(nick, current__);
                    return Ice.DispatchStatus.DispatchOK;
                }
                catch(Ice.UserException ex__)
                {
                    userException__ = ex__;
                    return Ice.DispatchStatus.DispatchUserException;
                }
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    if(status__ == Ice.DispatchStatus.DispatchUserException)
                    {
                        throw userException__;
                    }
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Chat.IChatException)
            {
                throw;
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }
    }

    public sealed class LobbyDelD_ : Ice.ObjectDelD_, LobbyDel_
    {
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Chat.RoomAccess Join(string nick, string topic, Ice.Identity listenerIdentity, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "Join", Ice.OperationMode.Normal, context__);
            Chat.RoomAccess result__ = new Chat.RoomAccess();
            Ice.UserException userException__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Lobby servant__ = null;
                try
                {
                    servant__ = (Lobby)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                try
                {
                    result__ = servant__.Join(nick, topic, listenerIdentity, current__);
                    return Ice.DispatchStatus.DispatchOK;
                }
                catch(Ice.UserException ex__)
                {
                    userException__ = ex__;
                    return Ice.DispatchStatus.DispatchUserException;
                }
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    if(status__ == Ice.DispatchStatus.DispatchUserException)
                    {
                        throw userException__;
                    }
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Chat.IChatException)
            {
                throw;
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }
    }
}

namespace Chat
{
    public abstract class ListenerDisp_ : Ice.ObjectImpl, Listener
    {
        #region Slice operations

        public void NotifyPost_async(Chat.AMD_Listener_NotifyPost cb__, Chat.Post newPost)
        {
            NotifyPost_async(cb__, newPost, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void NotifyPost_async(Chat.AMD_Listener_NotifyPost cb__, Chat.Post newPost, Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::Chat::Listener",
            "::Ice::Object"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[0];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[0];
        }

        public static new string ice_staticId()
        {
            return ids__[0];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus NotifyPost___(Listener obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            Chat.Post newPost;
            newPost = null;
            if(newPost == null)
            {
                newPost = new Chat.Post();
            }
            newPost.read__(is__);
            is__.endReadEncaps();
            AMD_Listener_NotifyPost cb__ = new _AMD_Listener_NotifyPost(inS__);
            try
            {
                obj__.NotifyPost_async(cb__, newPost, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        private static string[] all__ =
        {
            "NotifyPost",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return NotifyPost___(this, inS__, current__);
                }
                case 1:
                {
                    return ice_id___(this, inS__, current__);
                }
                case 2:
                {
                    return ice_ids___(this, inS__, current__);
                }
                case 3:
                {
                    return ice_isA___(this, inS__, current__);
                }
                case 4:
                {
                    return ice_ping___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeTypeId(ice_staticId());
            os__.startWriteSlice();
            os__.endWriteSlice();
            base.write__(os__);
        }

        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readTypeId();
            }
            is__.startReadSlice();
            is__.endReadSlice();
            base.read__(is__, true);
        }

        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type Chat::Listener was not generated with stream support";
            throw ex;
        }

        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type Chat::Listener was not generated with stream support";
            throw ex;
        }

        #endregion
    }

    public abstract class RoomDisp_ : Ice.ObjectImpl, Room
    {
        #region Slice operations

        public string GetRoomName()
        {
            return GetRoomName(Ice.ObjectImpl.defaultCurrent);
        }

        public abstract string GetRoomName(Ice.Current current__);

        public void Say(string message)
        {
            Say(message, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void Say(string message, Ice.Current current__);

        public void LeaveRoom()
        {
            LeaveRoom(Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void LeaveRoom(Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::Chat::Room",
            "::Ice::Object"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[0];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[0];
        }

        public static new string ice_staticId()
        {
            return ids__[0];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetRoomName___(Room obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            inS__.istr().skipEmptyEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            string ret__ = obj__.GetRoomName(current__);
            os__.writeString(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus Say___(Room obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string message;
            message = is__.readString();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            try
            {
                obj__.Say(message, current__);
                return Ice.DispatchStatus.DispatchOK;
            }
            catch(Chat.IllegalChatSessionException ex__)
            {
                os__.writeUserException(ex__);
                return Ice.DispatchStatus.DispatchUserException;
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus LeaveRoom___(Room obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            inS__.istr().skipEmptyEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            try
            {
                obj__.LeaveRoom(current__);
                return Ice.DispatchStatus.DispatchOK;
            }
            catch(Chat.IllegalChatSessionException ex__)
            {
                os__.writeUserException(ex__);
                return Ice.DispatchStatus.DispatchUserException;
            }
        }

        private static string[] all__ =
        {
            "GetRoomName",
            "LeaveRoom",
            "Say",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return GetRoomName___(this, inS__, current__);
                }
                case 1:
                {
                    return LeaveRoom___(this, inS__, current__);
                }
                case 2:
                {
                    return Say___(this, inS__, current__);
                }
                case 3:
                {
                    return ice_id___(this, inS__, current__);
                }
                case 4:
                {
                    return ice_ids___(this, inS__, current__);
                }
                case 5:
                {
                    return ice_isA___(this, inS__, current__);
                }
                case 6:
                {
                    return ice_ping___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeTypeId(ice_staticId());
            os__.startWriteSlice();
            os__.endWriteSlice();
            base.write__(os__);
        }

        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readTypeId();
            }
            is__.startReadSlice();
            is__.endReadSlice();
            base.read__(is__, true);
        }

        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type Chat::Room was not generated with stream support";
            throw ex;
        }

        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type Chat::Room was not generated with stream support";
            throw ex;
        }

        #endregion
    }

    public abstract class RoomV2Disp_ : Ice.ObjectImpl, RoomV2
    {
        #region Slice operations

        public string GetRoomName()
        {
            return GetRoomName(Ice.ObjectImpl.defaultCurrent);
        }

        public abstract string GetRoomName(Ice.Current current__);

        public void Say(string message, long time)
        {
            Say(message, time, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void Say(string message, long time, Ice.Current current__);

        public void LeaveRoom()
        {
            LeaveRoom(Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void LeaveRoom(Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::Chat::RoomV2",
            "::Ice::Object"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[0];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[0];
        }

        public static new string ice_staticId()
        {
            return ids__[0];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetRoomName___(RoomV2 obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            inS__.istr().skipEmptyEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            string ret__ = obj__.GetRoomName(current__);
            os__.writeString(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus Say___(RoomV2 obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string message;
            message = is__.readString();
            long time;
            time = is__.readLong();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            try
            {
                obj__.Say(message, time, current__);
                return Ice.DispatchStatus.DispatchOK;
            }
            catch(Chat.IllegalChatSessionException ex__)
            {
                os__.writeUserException(ex__);
                return Ice.DispatchStatus.DispatchUserException;
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus LeaveRoom___(RoomV2 obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            inS__.istr().skipEmptyEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            try
            {
                obj__.LeaveRoom(current__);
                return Ice.DispatchStatus.DispatchOK;
            }
            catch(Chat.IllegalChatSessionException ex__)
            {
                os__.writeUserException(ex__);
                return Ice.DispatchStatus.DispatchUserException;
            }
        }

        private static string[] all__ =
        {
            "GetRoomName",
            "LeaveRoom",
            "Say",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return GetRoomName___(this, inS__, current__);
                }
                case 1:
                {
                    return LeaveRoom___(this, inS__, current__);
                }
                case 2:
                {
                    return Say___(this, inS__, current__);
                }
                case 3:
                {
                    return ice_id___(this, inS__, current__);
                }
                case 4:
                {
                    return ice_ids___(this, inS__, current__);
                }
                case 5:
                {
                    return ice_isA___(this, inS__, current__);
                }
                case 6:
                {
                    return ice_ping___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeTypeId(ice_staticId());
            os__.startWriteSlice();
            os__.endWriteSlice();
            base.write__(os__);
        }

        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readTypeId();
            }
            is__.startReadSlice();
            is__.endReadSlice();
            base.read__(is__, true);
        }

        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type Chat::RoomV2 was not generated with stream support";
            throw ex;
        }

        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type Chat::RoomV2 was not generated with stream support";
            throw ex;
        }

        #endregion
    }

    public abstract class RoomAdmDisp_ : Ice.ObjectImpl, RoomAdm
    {
        #region Slice operations

        public void Kick(string nick)
        {
            Kick(nick, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void Kick(string nick, Ice.Current current__);

        public _System.Collections.Generic.List<string> GetParticipants()
        {
            return GetParticipants(Ice.ObjectImpl.defaultCurrent);
        }

        public abstract _System.Collections.Generic.List<string> GetParticipants(Ice.Current current__);

        #endregion

        #region Inherited Slice operations

        public string GetRoomName()
        {
            return GetRoomName(Ice.ObjectImpl.defaultCurrent);
        }

        public abstract string GetRoomName(Ice.Current current__);

        public void LeaveRoom()
        {
            LeaveRoom(Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void LeaveRoom(Ice.Current current__);

        public void Say(string message)
        {
            Say(message, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void Say(string message, Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::Chat::Room",
            "::Chat::RoomAdm",
            "::Ice::Object"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[1];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[1];
        }

        public static new string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus Kick___(RoomAdm obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string nick;
            nick = is__.readString();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            try
            {
                obj__.Kick(nick, current__);
                return Ice.DispatchStatus.DispatchOK;
            }
            catch(Chat.IChatException ex__)
            {
                os__.writeUserException(ex__);
                return Ice.DispatchStatus.DispatchUserException;
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetParticipants___(RoomAdm obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            inS__.istr().skipEmptyEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            _System.Collections.Generic.List<string> ret__ = obj__.GetParticipants(current__);
            os__.writeStringSeq(ret__ == null ? 0 : ret__.Count, ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        private static string[] all__ =
        {
            "GetParticipants",
            "GetRoomName",
            "Kick",
            "LeaveRoom",
            "Say",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return GetParticipants___(this, inS__, current__);
                }
                case 1:
                {
                    return Chat.RoomDisp_.GetRoomName___(this, inS__, current__);
                }
                case 2:
                {
                    return Kick___(this, inS__, current__);
                }
                case 3:
                {
                    return Chat.RoomDisp_.LeaveRoom___(this, inS__, current__);
                }
                case 4:
                {
                    return Chat.RoomDisp_.Say___(this, inS__, current__);
                }
                case 5:
                {
                    return ice_id___(this, inS__, current__);
                }
                case 6:
                {
                    return ice_ids___(this, inS__, current__);
                }
                case 7:
                {
                    return ice_isA___(this, inS__, current__);
                }
                case 8:
                {
                    return ice_ping___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeTypeId(ice_staticId());
            os__.startWriteSlice();
            os__.endWriteSlice();
            base.write__(os__);
        }

        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readTypeId();
            }
            is__.startReadSlice();
            is__.endReadSlice();
            base.read__(is__, true);
        }

        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type Chat::RoomAdm was not generated with stream support";
            throw ex;
        }

        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type Chat::RoomAdm was not generated with stream support";
            throw ex;
        }

        #endregion
    }

    public abstract class LobbyDisp_ : Ice.ObjectImpl, Lobby
    {
        #region Slice operations

        public Chat.RoomAccess Join(string nick, string topic, Ice.Identity listenerIdentity)
        {
            return Join(nick, topic, listenerIdentity, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract Chat.RoomAccess Join(string nick, string topic, Ice.Identity listenerIdentity, Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::Chat::Lobby",
            "::Ice::Object"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[0];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[0];
        }

        public static new string ice_staticId()
        {
            return ids__[0];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus Join___(Lobby obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string nick;
            nick = is__.readString();
            string topic;
            topic = is__.readString();
            Ice.Identity listenerIdentity;
            listenerIdentity = null;
            if(listenerIdentity == null)
            {
                listenerIdentity = new Ice.Identity();
            }
            listenerIdentity.read__(is__);
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            try
            {
                Chat.RoomAccess ret__ = obj__.Join(nick, topic, listenerIdentity, current__);
                if(ret__ == null)
                {
                    Chat.RoomAccess tmp__ = new Chat.RoomAccess();
                    tmp__.write__(os__);
                }
                else
                {
                    ret__.write__(os__);
                }
                return Ice.DispatchStatus.DispatchOK;
            }
            catch(Chat.IChatException ex__)
            {
                os__.writeUserException(ex__);
                return Ice.DispatchStatus.DispatchUserException;
            }
        }

        private static string[] all__ =
        {
            "Join",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return Join___(this, inS__, current__);
                }
                case 1:
                {
                    return ice_id___(this, inS__, current__);
                }
                case 2:
                {
                    return ice_ids___(this, inS__, current__);
                }
                case 3:
                {
                    return ice_isA___(this, inS__, current__);
                }
                case 4:
                {
                    return ice_ping___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeTypeId(ice_staticId());
            os__.startWriteSlice();
            os__.endWriteSlice();
            base.write__(os__);
        }

        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readTypeId();
            }
            is__.startReadSlice();
            is__.endReadSlice();
            base.read__(is__, true);
        }

        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type Chat::Lobby was not generated with stream support";
            throw ex;
        }

        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type Chat::Lobby was not generated with stream support";
            throw ex;
        }

        #endregion
    }
}

namespace Chat
{
    public interface AMD_Listener_NotifyPost : Ice.AMDCallback
    {
        void ice_response();
    }

    class _AMD_Listener_NotifyPost : IceInternal.IncomingAsync, AMD_Listener_NotifyPost
    {
        public _AMD_Listener_NotifyPost(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response()
        {
            if(validateResponse__(true))
            {
                response__(true);
            }
        }
    }
}

namespace Chat
{
    public class ListenerTie_ : ListenerDisp_, Ice.TieBase
    {
        public ListenerTie_()
        {
        }

        public ListenerTie_(ListenerOperations_ del)
        {
            _ice_delegate = del;
        }

        public object ice_delegate()
        {
            return _ice_delegate;
        }

        public void ice_delegate(object del)
        {
            _ice_delegate = (ListenerOperations_)del;
        }

        public override int GetHashCode()
        {
            return _ice_delegate == null ? 0 : _ice_delegate.GetHashCode();
        }

        public override bool Equals(object rhs)
        {
            if(object.ReferenceEquals(this, rhs))
            {
                return true;
            }
            if(!(rhs is ListenerTie_))
            {
                return false;
            }
            if(_ice_delegate == null)
            {
                return ((ListenerTie_)rhs)._ice_delegate == null;
            }
            return _ice_delegate.Equals(((ListenerTie_)rhs)._ice_delegate);
        }

        public override void NotifyPost_async(Chat.AMD_Listener_NotifyPost cb__, Chat.Post newPost, Ice.Current current__)
        {
            _ice_delegate.NotifyPost_async(cb__, newPost, current__);
        }

        private ListenerOperations_ _ice_delegate;
    }

    public class RoomTie_ : RoomDisp_, Ice.TieBase
    {
        public RoomTie_()
        {
        }

        public RoomTie_(RoomOperations_ del)
        {
            _ice_delegate = del;
        }

        public object ice_delegate()
        {
            return _ice_delegate;
        }

        public void ice_delegate(object del)
        {
            _ice_delegate = (RoomOperations_)del;
        }

        public override int GetHashCode()
        {
            return _ice_delegate == null ? 0 : _ice_delegate.GetHashCode();
        }

        public override bool Equals(object rhs)
        {
            if(object.ReferenceEquals(this, rhs))
            {
                return true;
            }
            if(!(rhs is RoomTie_))
            {
                return false;
            }
            if(_ice_delegate == null)
            {
                return ((RoomTie_)rhs)._ice_delegate == null;
            }
            return _ice_delegate.Equals(((RoomTie_)rhs)._ice_delegate);
        }

        public override string GetRoomName(Ice.Current current__)
        {
            return _ice_delegate.GetRoomName(current__);
        }

        public override void Say(string message, Ice.Current current__)
        {
            _ice_delegate.Say(message, current__);
        }

        public override void LeaveRoom(Ice.Current current__)
        {
            _ice_delegate.LeaveRoom(current__);
        }

        private RoomOperations_ _ice_delegate;
    }

    public class RoomV2Tie_ : RoomV2Disp_, Ice.TieBase
    {
        public RoomV2Tie_()
        {
        }

        public RoomV2Tie_(RoomV2Operations_ del)
        {
            _ice_delegate = del;
        }

        public object ice_delegate()
        {
            return _ice_delegate;
        }

        public void ice_delegate(object del)
        {
            _ice_delegate = (RoomV2Operations_)del;
        }

        public override int GetHashCode()
        {
            return _ice_delegate == null ? 0 : _ice_delegate.GetHashCode();
        }

        public override bool Equals(object rhs)
        {
            if(object.ReferenceEquals(this, rhs))
            {
                return true;
            }
            if(!(rhs is RoomV2Tie_))
            {
                return false;
            }
            if(_ice_delegate == null)
            {
                return ((RoomV2Tie_)rhs)._ice_delegate == null;
            }
            return _ice_delegate.Equals(((RoomV2Tie_)rhs)._ice_delegate);
        }

        public override string GetRoomName(Ice.Current current__)
        {
            return _ice_delegate.GetRoomName(current__);
        }

        public override void Say(string message, long time, Ice.Current current__)
        {
            _ice_delegate.Say(message, time, current__);
        }

        public override void LeaveRoom(Ice.Current current__)
        {
            _ice_delegate.LeaveRoom(current__);
        }

        private RoomV2Operations_ _ice_delegate;
    }

    public class RoomAdmTie_ : RoomAdmDisp_, Ice.TieBase
    {
        public RoomAdmTie_()
        {
        }

        public RoomAdmTie_(RoomAdmOperations_ del)
        {
            _ice_delegate = del;
        }

        public object ice_delegate()
        {
            return _ice_delegate;
        }

        public void ice_delegate(object del)
        {
            _ice_delegate = (RoomAdmOperations_)del;
        }

        public override int GetHashCode()
        {
            return _ice_delegate == null ? 0 : _ice_delegate.GetHashCode();
        }

        public override bool Equals(object rhs)
        {
            if(object.ReferenceEquals(this, rhs))
            {
                return true;
            }
            if(!(rhs is RoomAdmTie_))
            {
                return false;
            }
            if(_ice_delegate == null)
            {
                return ((RoomAdmTie_)rhs)._ice_delegate == null;
            }
            return _ice_delegate.Equals(((RoomAdmTie_)rhs)._ice_delegate);
        }

        public override void Kick(string nick, Ice.Current current__)
        {
            _ice_delegate.Kick(nick, current__);
        }

        public override _System.Collections.Generic.List<string> GetParticipants(Ice.Current current__)
        {
            return _ice_delegate.GetParticipants(current__);
        }

        public override string GetRoomName(Ice.Current current__)
        {
            return _ice_delegate.GetRoomName(current__);
        }

        public override void Say(string message, Ice.Current current__)
        {
            _ice_delegate.Say(message, current__);
        }

        public override void LeaveRoom(Ice.Current current__)
        {
            _ice_delegate.LeaveRoom(current__);
        }

        private RoomAdmOperations_ _ice_delegate;
    }

    public class LobbyTie_ : LobbyDisp_, Ice.TieBase
    {
        public LobbyTie_()
        {
        }

        public LobbyTie_(LobbyOperations_ del)
        {
            _ice_delegate = del;
        }

        public object ice_delegate()
        {
            return _ice_delegate;
        }

        public void ice_delegate(object del)
        {
            _ice_delegate = (LobbyOperations_)del;
        }

        public override int GetHashCode()
        {
            return _ice_delegate == null ? 0 : _ice_delegate.GetHashCode();
        }

        public override bool Equals(object rhs)
        {
            if(object.ReferenceEquals(this, rhs))
            {
                return true;
            }
            if(!(rhs is LobbyTie_))
            {
                return false;
            }
            if(_ice_delegate == null)
            {
                return ((LobbyTie_)rhs)._ice_delegate == null;
            }
            return _ice_delegate.Equals(((LobbyTie_)rhs)._ice_delegate);
        }

        public override Chat.RoomAccess Join(string nick, string topic, Ice.Identity listenerIdentity, Ice.Current current__)
        {
            return _ice_delegate.Join(nick, topic, listenerIdentity, current__);
        }

        private LobbyOperations_ _ice_delegate;
    }
}
